<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/jdbc
           http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
                   http://www.springframework.org/schema/tx
                   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-3.0.xsd">


       <description>Spring公共配置</description>
        <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <property name="locations">
                <list>
                    <value>classpath:dbconfig.properties</value>
                    <value>classpath:redis.properties</value>
                    <value>classpath:rmq.properties</value>
                </list>
            </property>
        </bean>
       <!-- 开启定时任务 -->
       <task:annotation-driven/>

       <context:component-scan base-package="com.web.core.*" />

       <!-- MyBatis配置 -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="dataSource" />
              <!-- 显式指定Mapper文件位置 -->
              <property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
              <!-- mybatis配置文件路径 -->
              <!--<property name="configLocation" value="classpath:/mybatis/config.xml"/>-->
       </bean>

       <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
              <constructor-arg index="0" ref="sqlSessionFactory" />
              <!-- 这个BATCH执行器会批量执行更新语句, 还有SIMPLE 和 REUSE -->
              <constructor-arg index="1" value="SIMPLE" />
       </bean>

       <!-- 扫描basePackage接口 -->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <!-- 映射器接口文件的包路径， -->
              <property name="basePackage" value="com.web.core.dao" />
       </bean>

       <!-- 使用annotation定义事务 -->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSource"></property>
       </bean>

       <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

       <!-- 数据源配置, 使用Tomcat JDBC连接池 -->
       <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
              <!-- Connection Info -->
              <property name="driverClassName" value="${driverClassName}" />
              <property name="url" value="${jdbc_url}" />
              <property name="username" value="${jdbc_username}" />
              <property name="password" value="${jdbc_password}" />

              <!-- Connection Pooling Info -->
              <!--<property name="maxActive" value="${jdbc.pool.maxActive}" />-->
              <!--<property name="maxIdle" value="${jdbc.pool.maxIdle}" />-->
              <!--<property name="minIdle" value="0" />-->
              <!--<property name="defaultAutoCommit" value="false" />-->
       </bean>

       <!--&lt;!&ndash; production环境 &ndash;&gt;-->
       <!--<beans profile="production">-->
              <!--<context:property-placeholder ignore-unresolvable="true" file-encoding="utf-8"-->
                                            <!--location="classpath:dbconfig.properties" />-->
       <!--</beans>-->

<!--del rmq-->
    <bean id="delProdConsumer" class="com.web.core.tool.MQ.MQExConsumerDelProd">
        <constructor-arg name="endpointName" value=""/>
        <constructor-arg name="bindKey" value="${rmq.delProdBindKey}"/>
        <constructor-arg name="exName" value="${rmq.delExName}"/>
        <constructor-arg name="exType" value="${rmq.delExType}"/>
        <constructor-arg name="host" value="${rmq.host}"/>
        <constructor-arg name="port" value="${rmq.port}"/>
    </bean>
    <bean id="delImgConsumer" class="com.web.core.tool.MQ.MQConsumerDelImg">
        <constructor-arg name="endpointName" value=""/>
        <constructor-arg name="bindKey" value="${rmq.delImgBindKey}"/>
        <constructor-arg name="exName" value="${rmq.delExName}"/>
        <constructor-arg name="exType" value="${rmq.delExType}"/>
        <constructor-arg name="host" value="${rmq.host}"/>
        <constructor-arg name="port" value="${rmq.port}"/>
    </bean>
    <bean id="mqDelProducer" class="com.web.core.tool.MQ.MQDelProducer">
        <constructor-arg name="exName" value="${rmq.delExName}"/>
        <constructor-arg name="exType" value="${rmq.delExType}"/>
        <constructor-arg name="host" value="${rmq.host}"/>
        <constructor-arg name="port" value="${rmq.port}"/>
    </bean>


    <bean id="topIndex" class="com.web.core.index.TopIndex"></bean>

    <!--redis-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxTotal}" />
        <property name="minIdle" value="${redis.pool.minIdle}" />
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.pool.maxWait}" />
        <property name="testWhileIdle" value="${redis.pool.testWhileIdle}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
        <property name="testOnReturn" value="${redis.pool.testOnReturn}" />
    </bean>

    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis1.ip}" />
                    <constructor-arg index="1" value="${redis1.port}" type="int" />
                </bean>
                <!--<bean class="redis.clients.jedis.JedisShardInfo">-->
                    <!--<constructor-arg index="0"-->
                            <!--value="${redis2.ip}" />-->
                    <!--<constructor-arg index="1" value="${redis.port}" type="int" />-->
                <!--</bean>-->
            </list>
        </constructor-arg>
    </bean>

    <bean id="redisClient" class="com.web.core.kv.RedisClient">
        <constructor-arg name="pool" ref="shardedJedisPool" />
    </bean>

</beans>